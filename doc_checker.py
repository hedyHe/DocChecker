#coding=utf-8

import os
os.environ['CUDA_VISIBLE_DEVICES'] = '3'

import json, re
import datetime
import numpy as np
import optparse
import traceback
from collections import defaultdict
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
from docx import Document
# from llm_api import Qwen

from llm_api_vllm import Qwen
# from llm_api import Qwen

import random
random.seed(43)

class Checker(object):
	def __init__(self):
		self.check_type = 'all_doc'   #这篇文档输进去进行评测
		#check_type = 'paragraph'   #每次只处理一个段落`
		self.check_error = 'single'	#每次只处理一个类型的错误
		#check_error = 'multi'	 #每次处理所有类型的错误 
		

		self.llm = 'qwen2.5_7b'
		# self.llm = 'qwen2.5_32b'
		self.llm = 'qwen2.5_7b_lora'
		self.llm = 'qwen2.5_14b_lora'
		self.llm = 'qwen2.5_14b_lora_1_5_new'
		self.llm = 'qwen2.5_14b_lora_1_3_new'
		self.llm = 'qwen2.5_14b_lora_1_3_filter'
		# self.llm = 'qwen2.5_14b'
		# self.llm = 'ds_qwen2.5_14b'   #qwen2.5-14b

		self.llm_api = Qwen(self.llm)
		self.vllm = True
		# self.vllm = False
		# self.llm_api = None


		# doc_types = {"招投标": ["2024年国家免疫规划疫苗-脊髓灰质炎灭活疫苗补种集中采购项目-项目采购第七批招标公告", "2024年国家免疫规划疫苗集中采购项目-项目采购第七批招标公告", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告", "中国人民大学附属中学2024-2027年度保安服务采购项目招标公告", "中国人民银行山东省分行ACS内容缓存平台和安全云平台相关硬件设备采购项目招标公告", "中国医学科学院北京协和医院小型机服务器采购项目招标公告", "中国医学科学院北区物业综合管理服务采购项目招标公告", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告", "中国医学科学院阜外医院西山园区保安服务采购项目招标公告", "中国医学科学院阜外医院风机盘管维保采购项目招标公告", "中国地震台网中心预警项目改扩建基础设施采购项目招标公告", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告", "中国社会科学院大学良乡校区2024-2027年保安服务采购项目招标公告", "中央国家机关2024年工程监理服务框架协议采购项目征集公告", "中央美术学院消防安防控制室管理服务采购项目招标公告", "北京大学第一医院全院印刷品采购项目招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目一标段二次招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目二标段招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目五标段招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目六标段招标公告", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告", "四川大学华西医院PACS计算存储采购项目招标公告", "国家开放大学五棵松校区电梯更换工程采购项目（三次）资格预审公告  （工程类）  ", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告", "国家机关事务管理局西山服务局2024年7月至2027年7月食材配送采购项目招标公告", "国家林业和草原局碳卫星海南试验站设备采购及集成项目招标公告", "国家气象中心海洋气象综合保障二期工程远洋导航业务支撑硬件资源建设采购项目招标公告", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告", "国家药品监督管理局医疗器械技术审评中心新址网络及多媒体融合集成采购项目招标公告", "国家语委普通话水平测试等级证书印制项目招标公告", "天津市地震局天津市巨灾防范工程-数据平台建设(国家中心信息化硬件系统建设)采购项目招标公告", "天津市地震局天津市巨灾防范工程-数据平台建设(省级中心信息化建设)采购项目招标公告", "常州市消防救援支队本级指挥中心改造采购项目招标公告", "应急管理部2023年国家森林草原防灭火储备物资采购项目（涡轮增压型森林消防水泵）招标公告", "教育部教育考试院数据中心计算资源采购项目招标公告", "最高人民检察院中国-东盟检务信息交流中心综合服务系统项目采购项目招标公告", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告", "西安市消防救援支队培训楼会议视频系统采购项目招标公告"], 
		# 		"石油领域的招投标": ["2024-2025年度新疆油田公司防腐涂料（框架）", "2024~2026年独山子石化中密控股密封维修框架公开招标", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）", "中国石油天然气管道科学研究院有限公司焊接易损易耗件加工制造选商招标项目（二次）", "中国石油天然气股份有限公司青海销售分公司安全现状评价采购项目", "中国石油天然气集团有限公司2024年消防车集中采购（安全生产预防和应急救援能力建设补助资金项目）招标", "中国石油独山子石化公司聚烯烃二部四台往复式压缩机组采购项目公开招标二次", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）", "中油测井激发极化仪器数据处理方法研究及正反演软", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）", "吉林中油宝石花石油安装有限责任公司劳务外包项目", "吉林石化公司转型升级项目最小回流阀采购招标项目二次", "吐哈油田消防车库改造项目", "咸阳宝石钢管钢绳有限公司2024-2025年度镀铬泵筒采购", "塔里木二期项目裂解气清焦阀和传输阀(变更)(变更)", "塔里木油田库尔勒上库高新区低碳转型130万千瓦光伏项目光伏区1标段EPC总承包", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）", "新能源事业部2024-2025年度项目管理咨询服务", "智能化多井对比与沉积微相绘图模块研发（二次）", "氢氟酸代储代销", "测井公司吐哈分公司2024-2026年职工食堂餐饮服务业务外包项目", "玉门油田2024-2025炼化总厂易腐蚀管道脉冲涡流扫查服务", "玉门油田环庆分公司2024年度计量器具检定校准检测项目", "甘油代储代销", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购", "西南油气田分公司勘探事业部2024年度溢流监测预警系统技术服务", "西南管道公司2024年B型套筒物资采购项目", "西部钻探2024年井下作业公司前置蓄能压裂注气服务(X09-023)定商项目", "辽阳石化分公司10万吨年尼龙66项目施工总承包", "长城钻探昆山公司2024年度国际货代", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目", "长庆油田分公司第三采油厂2024年盐67区二氧化碳驱注入管柱镍钨镀层防腐加工服务项目", "长庆油田分公司第二采油厂2024年环保管家技术服务项目", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）", "风城油田夏子街转油站完善工程"], 
		# 		"法规": ["中华人民共和国中国人民银行法", "中华人民共和国企业国有资产法", "中华人民共和国企业破产法", "中华人民共和国会计法", "中华人民共和国保险法", "中华人民共和国反不正当竞争法", "中华人民共和国商业银行法", "中华人民共和国审计法", "中华人民共和国招标投标法", "中华人民共和国招标投标法实施条例", "中华人民共和国社会保险法", "中华人民共和国预算法", "中华人民共和国预算法实施条例", "平安产险交通工具意外伤害保险（互联网版）条款", "平安产险女性安康特定疾病保险（互联网版）条款", "平安产险学生意外伤害保险（互联网版）条款", "平安产险意外伤害保险（互联网版）条款", "平安产险老年人医疗费用保险（互联网版）条款", "平安产险附加家庭财产服务保险条款", "平安产险附加特定药品费用医疗保险（B款）条款", "平安宠物传染病医疗费用损失保险条款", "平安家庭财产保险（家庭版）条款", "平安银行卡盗刷保险条款", "政府购买服务管理办法", "政府采购货物和服务招标投标管理办法", "政府采购非招标采购方式管理办法", "期货交易管理条例", "私募投资基金监督管理暂行办法", "证券公司监督管理条例", "金融违法行为处罚办法"], 
		# 		"行业研报": ["2024年1-4月中国房地产企业销售业绩排行榜", "2024年4月博彩数据跟踪点评：4月博收超出预期，黄金周客流略低于预期", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次", "传媒互联网周报：OpenAI、小冰等国多模态AI应用落地，“数据要素X”三年行动计划正式印发", "传媒互联网行业周报：五一档票房破15亿，假期大涨维持看好恒生科技", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%", "化工行业周报：海外天然气价格上涨，纯碱、草甘膦价格上涨", "化工行业周报：细分板块关注度提升，产品价格延续涨势", "医药制造行业2024年度行业分析", "商用车：4月重卡销量略超预期，出口+天然气持续高增", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长", "影视行业行业动态：后续电影档期展望，复苏已变新成长", "我国特高压建设提速，柔性直流输电市场潜力巨大", "房地产行业周报（2024年第18周）：政治局会议新表述注入信心，地产股政策博弈价值凸显", "房地产：2024年5月上海市住宅价格发布", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势", "汽车板块2023年年报&2024年一季报总结：2023年汽车各子板块业绩均改善，2024年Q1客车业绩超预期", "消费行业五一消费观察：常态化复苏，结构性特征延续", "游戏Ⅱ行业深度报告：游戏行业2023年及2024Q1业绩综述：产品周期驱动业绩增长，全方位拥抱AI技术变革", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位", "电力行业3月月报：中电联预计上半年用电量增速有望超8%，现货电价环比逐步企稳", "电力设备及新能源行业点评：Solaredge一季度续亏，欧美户用逆变器市场较弱", "电子行业2023年报及2024一季报综述：周期拐点已现，AI动能持续", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道", "电子行业：2024Q1 PCB需求回暖，AI仍是主要驱动力", "石化周报：地缘风险溢价回落，关注OPEC+减产情况", "社会服务：五一黄金周点评-国内出行韧性凸显，多重利好推动出境游增长靓丽", "计算机行业周报：特斯拉通过国家汽车数据安全要求，自动驾驶板块有望受益", "计算机行业周观点：《“数据要素×”三年行动计划（2024—2026年）》印发，自定义Chat GPT商店即将上线", "计算机：交通数字化升级政策出台，带来千亿增量市场", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》", "部分长丝装置停车改造化工品价差继续扩大", "金属行业5月投资策略：继续看好有色上游机会", "钙钛矿行业深度报告：产研并进，降本提效，共赴星辰大海", "钢铁行业跟踪周报：需求弱势叠加成本上行，预计钢价震荡运行", "银行理财产品周报", "银行行业：金融支持住房租赁发展，有望成为新业务增长点", "非银金融行业事件点评报告：股息税减免预期催化大涨，关注政策α和复苏周期β机遇"]}
		
		self.doc_types = {"2024年国家免疫规划疫苗-脊髓灰质炎灭活疫苗补种集中采购项目-项目采购第七批招标公告": "招投标", "2024年国家免疫规划疫苗集中采购项目-项目采购第七批招标公告": "招投标", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告": "招投标", "中国人民大学附属中学2024-2027年度保安服务采购项目招标公告": "招投标", "中国人民银行山东省分行ACS内容缓存平台和安全云平台相关硬件设备采购项目招标公告": "招投标", "中国医学科学院北京协和医院小型机服务器采购项目招标公告": "招投标", "中国医学科学院北区物业综合管理服务采购项目招标公告": "招投标", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告": "招投标", "中国医学科学院阜外医院西山园区保安服务采购项目招标公告": "招投标", "中国医学科学院阜外医院风机盘管维保采购项目招标公告": "招投标", "中国地震台网中心预警项目改扩建基础设施采购项目招标公告": "招投标", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告": "招投标", "中国社会科学院大学良乡校区2024-2027年保安服务采购项目招标公告": "招投标", "中央国家机关2024年工程监理服务框架协议采购项目征集公告": "招投标", "中央美术学院消防安防控制室管理服务采购项目招标公告": "招投标", "北京大学第一医院全院印刷品采购项目招标公告": "招投标", "北京市消防救援总队应急能力建设车辆装备购置项目一标段二次招标公告": "招投标", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告": "招投标", "北京市消防救援总队应急能力建设车辆装备购置项目二标段招标公告": "招投标", "北京市消防救援总队应急能力建设车辆装备购置项目五标段招标公告": "招投标", "北京市消防救援总队应急能力建设车辆装备购置项目六标段招标公告": "招投标", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告": "招投标", "四川大学华西医院PACS计算存储采购项目招标公告": "招投标", "国家开放大学五棵松校区电梯更换工程采购项目（三次）资格预审公告  （工程类）  ": "招投标", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告": "招投标", "国家机关事务管理局西山服务局2024年7月至2027年7月食材配送采购项目招标公告": "招投标", "国家林业和草原局碳卫星海南试验站设备采购及集成项目招标公告": "招投标", "国家气象中心海洋气象综合保障二期工程远洋导航业务支撑硬件资源建设采购项目招标公告": "招投标", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告": "招投标", "国家药品监督管理局医疗器械技术审评中心新址网络及多媒体融合集成采购项目招标公告": "招投标", "国家语委普通话水平测试等级证书印制项目招标公告": "招投标", "天津市地震局天津市巨灾防范工程-数据平台建设(国家中心信息化硬件系统建设)采购项目招标公告": "招投标", "天津市地震局天津市巨灾防范工程-数据平台建设(省级中心信息化建设)采购项目招标公告": "招投标", "常州市消防救援支队本级指挥中心改造采购项目招标公告": "招投标", "应急管理部2023年国家森林草原防灭火储备物资采购项目（涡轮增压型森林消防水泵）招标公告": "招投标", "教育部教育考试院数据中心计算资源采购项目招标公告": "招投标", "最高人民检察院中国-东盟检务信息交流中心综合服务系统项目采购项目招标公告": "招投标", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告": "招投标", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告": "招投标", "西安市消防救援支队培训楼会议视频系统采购项目招标公告": "招投标", "2024-2025年度新疆油田公司防腐涂料（框架）": "石油领域的招投标", "2024~2026年独山子石化中密控股密封维修框架公开招标": "石油领域的招投标", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目": "石油领域的招投标", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）": "石油领域的招投标", "中国石油天然气管道科学研究院有限公司焊接易损易耗件加工制造选商招标项目（二次）": "石油领域的招投标", "中国石油天然气股份有限公司青海销售分公司安全现状评价采购项目": "石油领域的招投标", "中国石油天然气集团有限公司2024年消防车集中采购（安全生产预防和应急救援能力建设补助资金项目）招标": "石油领域的招投标", "中国石油独山子石化公司聚烯烃二部四台往复式压缩机组采购项目公开招标二次": "石油领域的招投标", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目": "石油领域的招投标", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外": "石油领域的招投标", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外": "石油领域的招投标", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）": "石油领域的招投标", "中油测井激发极化仪器数据处理方法研究及正反演软": "石油领域的招投标", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）": "石油领域的招投标", "吉林中油宝石花石油安装有限责任公司劳务外包项目": "石油领域的招投标", "吉林石化公司转型升级项目最小回流阀采购招标项目二次": "石油领域的招投标", "吐哈油田消防车库改造项目": "石油领域的招投标", "咸阳宝石钢管钢绳有限公司2024-2025年度镀铬泵筒采购": "石油领域的招投标", "塔里木二期项目裂解气清焦阀和传输阀(变更)(变更)": "石油领域的招投标", "塔里木油田库尔勒上库高新区低碳转型130万千瓦光伏项目光伏区1标段EPC总承包": "石油领域的招投标", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）": "石油领域的招投标", "新能源事业部2024-2025年度项目管理咨询服务": "石油领域的招投标", "智能化多井对比与沉积微相绘图模块研发（二次）": "石油领域的招投标", "氢氟酸代储代销": "石油领域的招投标", "测井公司吐哈分公司2024-2026年职工食堂餐饮服务业务外包项目": "石油领域的招投标", "玉门油田2024-2025炼化总厂易腐蚀管道脉冲涡流扫查服务": "石油领域的招投标", "玉门油田环庆分公司2024年度计量器具检定校准检测项目": "石油领域的招投标", "甘油代储代销": "石油领域的招投标", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购": "石油领域的招投标", "西南油气田分公司勘探事业部2024年度溢流监测预警系统技术服务": "石油领域的招投标", "西南管道公司2024年B型套筒物资采购项目": "石油领域的招投标", "西部钻探2024年井下作业公司前置蓄能压裂注气服务(X09-023)定商项目": "石油领域的招投标", "辽阳石化分公司10万吨年尼龙66项目施工总承包": "石油领域的招投标", "长城钻探昆山公司2024年度国际货代": "石油领域的招投标", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目": "石油领域的招投标", "长庆油田分公司第三采油厂2024年盐67区二氧化碳驱注入管柱镍钨镀层防腐加工服务项目": "石油领域的招投标", "长庆油田分公司第二采油厂2024年环保管家技术服务项目": "石油领域的招投标", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）": "石油领域的招投标", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）": "石油领域的招投标", "风城油田夏子街转油站完善工程": "石油领域的招投标", "中华人民共和国中国人民银行法": "法规", "中华人民共和国企业国有资产法": "法规", "中华人民共和国企业破产法": "法规", "中华人民共和国会计法": "法规", "中华人民共和国保险法": "法规", "中华人民共和国反不正当竞争法": "法规", "中华人民共和国商业银行法": "法规", "中华人民共和国审计法": "法规", "中华人民共和国招标投标法": "法规", "中华人民共和国招标投标法实施条例": "法规", "中华人民共和国社会保险法": "法规", "中华人民共和国预算法": "法规", "中华人民共和国预算法实施条例": "法规", "平安产险交通工具意外伤害保险（互联网版）条款": "法规", "平安产险女性安康特定疾病保险（互联网版）条款": "法规", "平安产险学生意外伤害保险（互联网版）条款": "法规", "平安产险意外伤害保险（互联网版）条款": "法规", "平安产险老年人医疗费用保险（互联网版）条款": "法规", "平安产险附加家庭财产服务保险条款": "法规", "平安产险附加特定药品费用医疗保险（B款）条款": "法规", "平安宠物传染病医疗费用损失保险条款": "法规", "平安家庭财产保险（家庭版）条款": "法规", "平安银行卡盗刷保险条款": "法规", "政府购买服务管理办法": "法规", "政府采购货物和服务招标投标管理办法": "法规", "政府采购非招标采购方式管理办法": "法规", "期货交易管理条例": "法规", "私募投资基金监督管理暂行办法": "法规", "证券公司监督管理条例": "法规", "金融违法行为处罚办法": "法规", "2024年1-4月中国房地产企业销售业绩排行榜": "行业研报", "2024年4月博彩数据跟踪点评：4月博收超出预期，黄金周客流略低于预期": "行业研报", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次": "行业研报", "传媒互联网周报：OpenAI、小冰等国多模态AI应用落地，“数据要素X”三年行动计划正式印发": "行业研报", "传媒互联网行业周报：五一档票房破15亿，假期大涨维持看好恒生科技": "行业研报", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化": "行业研报", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%": "行业研报", "化工行业周报：海外天然气价格上涨，纯碱、草甘膦价格上涨": "行业研报", "化工行业周报：细分板块关注度提升，产品价格延续涨势": "行业研报", "医药制造行业2024年度行业分析": "行业研报", "商用车：4月重卡销量略超预期，出口+天然气持续高增": "行业研报", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长": "行业研报", "影视行业行业动态：后续电影档期展望，复苏已变新成长": "行业研报", "我国特高压建设提速，柔性直流输电市场潜力巨大": "行业研报", "房地产行业周报（2024年第18周）：政治局会议新表述注入信心，地产股政策博弈价值凸显": "行业研报", "房地产：2024年5月上海市住宅价格发布": "行业研报", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜": "行业研报", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势": "行业研报", "汽车板块2023年年报&2024年一季报总结：2023年汽车各子板块业绩均改善，2024年Q1客车业绩超预期": "行业研报", "消费行业五一消费观察：常态化复苏，结构性特征延续": "行业研报", "游戏Ⅱ行业深度报告：游戏行业2023年及2024Q1业绩综述：产品周期驱动业绩增长，全方位拥抱AI技术变革": "行业研报", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位": "行业研报", "电力行业3月月报：中电联预计上半年用电量增速有望超8%，现货电价环比逐步企稳": "行业研报", "电力设备及新能源行业点评：Solaredge一季度续亏，欧美户用逆变器市场较弱": "行业研报", "电子行业2023年报及2024一季报综述：周期拐点已现，AI动能持续": "行业研报", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道": "行业研报", "电子行业：2024Q1 PCB需求回暖，AI仍是主要驱动力": "行业研报", "石化周报：地缘风险溢价回落，关注OPEC+减产情况": "行业研报", "社会服务：五一黄金周点评-国内出行韧性凸显，多重利好推动出境游增长靓丽": "行业研报", "计算机行业周报：特斯拉通过国家汽车数据安全要求，自动驾驶板块有望受益": "行业研报", "计算机行业周观点：《“数据要素×”三年行动计划（2024—2026年）》印发，自定义Chat GPT商店即将上线": "行业研报", "计算机：交通数字化升级政策出台，带来千亿增量市场": "行业研报", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》": "行业研报", "部分长丝装置停车改造化工品价差继续扩大": "行业研报", "金属行业5月投资策略：继续看好有色上游机会": "行业研报", "钙钛矿行业深度报告：产研并进，降本提效，共赴星辰大海": "行业研报", "钢铁行业跟踪周报：需求弱势叠加成本上行，预计钢价震荡运行": "行业研报", "银行理财产品周报": "行业研报", "银行行业：金融支持住房租赁发展，有望成为新业务增长点": "行业研报", "非银金融行业事件点评报告：股息税减免预期催化大涨，关注政策α和复苏周期β机遇": "行业研报"}

		#self.examples = {"常识性错误": """1. 日期错误：4月31日，杭州进行第四批供地。 （月份天数错误）\n2. 季度错误：零部件板块2024年Q5盈利增长改善明显。 （不存在第五季度）""",
		# "数值单位错误":"""1. 丁桥单元JG0404-11地块出让面积30514平方分米。 （地块面积基本用平方米衡量，不会用平方分米）\n2. 出口车辆7.2辆。 （车辆数量可能是小数，中间肯定少了一个数据量级单位，如万）""",
		# "时间矛盾错误":"""1. 2月28号电报 3月1号成功举办马拉松活动。（报导还没发生的事情）\n2. 标的开始投递时间2012年5月24日，结束时间2012年5月23日。		""",
		# "数据重复错误":"""1. 由公安机关处十五日以下拘留、一万元以下罚款。...由公安机关处十五日以下拘留、一万元以下罚款。\n2. 没收违法所得或者违法所得不足二十万元，处以二十万元以上一百万元以下罚款...不足二十万元，处以违法所得一倍以上五倍以下的返款。""",
		# "逻辑错误":"""1. 第五十一条　有下列情形之一的，评标委员会应当否决其投标： (三)投标人符合国家或者招标文件规定的资格条件；。\n2. 申请人承诺在近30个月内","(2020年5月27日至2024年5月27日）未发生以下事故。""",
		# "数值前后不一致":"""1. 12位候选中排名13。（超过候选人数）\n2. 总载物1万吨...总载物2万吨。 """,
		# "数据缺失错误":"""1. 联系人及电话：李三。（缺少电话）\n2. 本周（4.29-5.5）纯碱价格上涨。根据百川盈孚，4月30日95%草甘膦原粉市场均价为25,993元/吨。 （未给出具体的涨幅）""",
		# "计算错误":"""1. 髋关节产品系统年度采购需求量285995个（陶瓷-陶瓷类髋关节102264个、陶瓷聚乙烯类173303个、合金-聚乙烯类1042个）。 （102264+173303+1042不等于285995）\n2. 每年最高限价200万元，三年最高限价1000万元。"""
		# }
		# self.definitions = {"常识性错误":"常识性错误是指与人类普遍认知和基本生活经验相悖的陈述。例如：时间指向未来或遥远的过去，日期超出当前月的最大天数，季度划分错误，电话号码、邮箱地址、网址等格式不符合常见规范等等错误。",
		# "数据重复错误":"数据重复错误是指在一段话中重复出现的句子。例如：重复了两次对某一犯罪案例的惩罚结果。",
		# "时间矛盾错误":"时间矛盾错误是指事件的时间顺序、因果关系或时间表达存在冲突。例如：一个人的离职时间在他的入职时间之前；第一次文件的修改时间在第二次修改之后等等错误。",
		# "数值单位错误":"数值单位错误是指在描述数据时，错误地混淆或遗漏了数值单位，导致信息表达不准确地问题。例如：在描述面积时，将平方米误写为平方厘米；描述金额时万元误写为元等错误。",
		# "数据缺失错误":"数据缺失错误是指文档描述中缺失一些属性值的情况。例如：“联系人及电话”后仅给出电话号码而没有提供联系人姓名；文档中只给出投标填报网站名而没给出具体的网址等错误。",
		# "逻辑矛盾错误":"逻辑矛盾错误指在逻辑推理中出现的一种错误，即两个或多个论断或命题相互矛盾，导致推理无法成立。例如：在列举可以参加招标的条件时，如果给出了不能参加招标的情况，就会产生逻辑矛盾。同样，当需要列举可以不赔偿的情况，却列出需要赔偿的条件时，也属于矛盾错误的范围。",
		# "数值前后不一致":"数值前后不一致指在同一篇文档中，同一个属性的数值出现了不一致的情况。例如：产品价格在文档的前半部为50元，但到了文档后半部变成了60元；产品的含税价格比不含税的价格底等错误",
		# "计算错误":"计算错误是指在文档中对总数进行拆分或对细分项进行求和，但细分项的总和不等于总数。例如：预计投资总额为100万元，第一次投资50万元，第二次投资60万元，两次打款总额为100万元，显然超过预计投资总额。"}

		self.definitions = {"数值缺失错误": "数值缺失错误是指在文本中出现了应当明确提供的数值信息（如数量、金额、比例、时间、网址等），但该数值被遗漏，导致语义不完整或信息表达不清的情况。",
			"语句缺失错误": "语句缺失错误是指文段中存在结构性或内容性遗漏，尤其是在列举、排比、并列句等句式中，缺失了应有的语句、成分或内容项，导致语义不完整或表述突兀。",
			"格式错误":"格式错误是指文档中出现的数据项在表现形式上不符合预先设定或常用的格式规则。常见问题包括：网址格式不对，邮编不是6位数，邮箱少@，联系电话位数不对。",
			"时间信息非法": "时间信息非法是指文档中出现了不符合现实或常规表达的时间描述。常见问题包括：日期中的“日”超过该月的最大天数，月份超过12月，小时数不在0-23的范围内，年份不符合上下文语境。",
			"数值单位错误":"数值单位错误是指文档中数值所对应的单位使用不。常见问题包括：单位选择不合常理（如面积使用平方分米，观影人数使用“人次”但具体数量为小数）；单位与数值语义不匹配（如礼堂改造项目的预算金额为200.00元）。",
			"主体不一致":"主体不一致是指文档中提及的主体（如人、组织、事件等）在不同部分的描述存在冲突或混淆。常见问题包括：不同主题被误认为同一主体；属性描述相互矛盾。",
			"冗余语句":"冗余语句是指文档中出现内容重复或表达重复的语句片段，这类冗余通常不会增加新的信息。常见问题包括：相同数据；措辞的重复。",
			"时间矛盾错误":"时间矛盾错误是指文档中出现了违反时间逻辑的描述。常见问题包括：逻辑时间顺序错误（如“开标早于投标截至时间”）;时间表达不合理（如“上午23点”）。",
			"计算错误":"计算错误是指文档中涉及数值计算、比例分配、增长率变动等方面的结果与其应有的计算逻辑不一致。常见问题包括：数值计算错误，比例之和大于100%，增减幅度计算错误等。",
			"语义逻辑矛盾":"语义逻辑矛盾是指文档内容在逻辑上存在明显冲突或自相矛盾的情况。常见问题包括：条件与结论不符；排名与所属范围不一致；表述本身存在矛盾或语义冲突。",
			"数值不一致错误":"数值不一致错误是指在同一文档中，本应保持一致的数值信息在不同位置出现不一致的情况，通常发生在标书编号、金额、数量、时间等关键字段。"
			}	

		self.examples = {"数值缺失错误": [["当周发行固定收益类产品数量只"], ["联系人及电话：李三。"], ["国际/地区航线日均执飞航班数同比增长/44.7%"]],
			"语句缺失错误": [["3年以上期限产品的平均业绩基准均值最高，为3.70%；1-3个月产品的平均业绩比较基准均值最低。"], ["第十八条 国家建立基本养老金正常调整机制。根据职工平均工资增长、物价上涨情况，适时提高基本养老保险待遇水平。第二十条 国家建立和完善新型农村社会养老保险制度。"]],
			"格式错误": [["联系方式：10-1"], ["邮编：12"]],
			"时间信息非法": [["4月31日"], ["129年发布"], ["晚上25时"]],
			"数值单位错误": [["日均超3.7人次"], ["建筑面积1590平方分米"], ["总金额：31.0000元"]],
			"主体不一致": [["项目名为：丙酮运输招标", "投标人需具备乙醇相关资质"], ["订立本保险合同时，采用保险人提供的格式条款的，保险人向投保人提供的投保单应当附格式条款，被保险人应当向投保人说明本保险合同的内容。"]],
			"冗余语句":[["4. 招标文件的获取", "6. 招标文件的获取"]],
			"时间矛盾错误":[["上午13点"],["投标截至时间：2024年3月12日9点", "开标时间：2024年3月11日9点"]],
			"计算错误":[["第一次付款30%，第二次付款40%，第三次付款40%"], ["同比从+50.57%上升24.11pct至+94.68%"]],
			"语义逻辑矛盾":[["参与投标的供应商必须具备以下资格，任何一条不满足将不会被否决参与投标。"], ["在申万31个一级子行业中排名为第35位"], ["3．投标人资格要求","3.1 被列入失信人名单得企业。"]],
			"数值不一致错误": [["项目编号：GC-HGX240218","四川大学华西医院PACS计算存储采购项目GC-HGX24028"], ["预算金额：2687.6万元", "本项目的预算总金额为268.6万人民币"]]
			}	

		self.error_types = ["数值缺失错误", "语句缺失错误" ,
							"格式错误", "时间信息非法", "数值单位错误", 
							"冗余语句", "时间矛盾错误", "计算错误", "语义逻辑矛盾", "数值不一致错误"]

		# self.examples = {"常识性错误": [["4月31日，杭州进行第四批供地。"], ["零部件板块2024年Q5盈利增长改善明显。"]],
		# "数据重复错误":[["由公安机关处十五日以下拘留、一万元以下罚款。...由公安机关处十五日以下拘留、一万元以下罚款。"], ["没收违法所得或者违法所得不足二十万元，处以二十万元以上一百万元以下罚款...不足二十万元，处以违法所得一倍以上五倍以下的返款。"]],
		# "时间矛盾错误":[["2月28号电报","3月1号成功举办马拉松活动。"]],
		# "数值单位错误":[["丁桥单元JG0404-11地块出让面积30514平方分米。"], ["出口车辆7.2辆。 "]],
		# "数据缺失错误":[["联系人及电话：李三。"]],
		# "逻辑矛盾错误":[["第五十一条　有下列情形之一的，评标委员会应当否决其投标："," (三)投标人符合国家或者招标文件规定的资格条件；。"]],
		# "数值前后不一致":[["12位候选中排名13。"], ["总载物1万吨...总载物2万吨。"]],
		# "计算错误":[["髋关节产品系统年度采购需求量285995个（陶瓷-陶瓷类髋关节102264个、陶瓷聚乙烯类173303个、合金-聚乙烯类1042个）。 （102264+173303+1042不等于285995）"], ["每年最高限价200万元，三年最高限价1000万元。"]]
		# }

		# self.error_types = ["常识性错误", "数值单位错误", "时间矛盾错误", "数据重复错误", "逻辑矛盾错误", "数值前后不一致", "数据缺失错误", "计算错误"]

		self.prompt_doc_single = """
			你是一名金融文档质量检查专家，负责识别金融文档中的【【错误类型】】。
			【任务说明】
			1. 【【错误类型】】示例
			【examples】\n
			2. 检测流程
			2.1. 通读整篇研报，标注可疑语句（单句异常或语句对矛盾）；
			2.2. 内部一致性检查【【错误类型】】；
			2.3. 金融行业的常识校验；\n
			3. 输出要求
			3.1 仅输出确认存在错误的原文片段；
			3.2 保持原文措辞；
			3.3 严格按照嵌套列表的形式返回检查结果：[["单个错误语句1"], ["单个错误语句2"], ["原文语句1", "矛盾的语句1"]]

			以下是给定的【【type】】文档，请仔细识别其中包含【【错误类型】】的句子。
			-------------
			【标题】：\n
			【正文】：\n
			------------
			"""
		self.prompt_doc_single1 = """
			你是一名金融文档质量检查专家，负责识别金融文档中的【【错误类型】】。请按照以下流程处理文档：
			【任务说明】
			1. 【定义】：【错误类型定义】
			   【示例】：
			【examples】
			2. 检测流程
			2.1. 通读整篇研报，标注可疑语句；
			2.2. 内部一致性检查【【错误类型】】；
			2.3. 金融行业的常识校验；
			3. 输出要求
			3.1 仅输出确认存在错误的原文片段；
			3.2 保持原文措辞；
			3.3 严格按照列表的形式返回所有错误的文本，如：["单个错误语句1", "单个错误语句2"]

			以下是给定的【【type】】文档，请仔细识别正文是否包含【【错误类型】】的句子，并以列表形式返回，若没有发现该类错误，请返回空列表[]。
			-------------
			【标题】：
			【正文】：
			------------
			"""

		self.prompt_doc_logic = """
			你是一名金融文档的质检专家，负责识别金融文档中的【【错误类型】】。请按照以下流程处理文档：
			【任务说明】
			1. 【【错误类型】】示例
			【examples】
			2. 文档处理流程
			2.1. 通读整篇研报，标注所有可疑的语句对；
			2.2. 交叉验证【【错误类型】】。
			3. 输出要求
			3.1 仅返回确认后的存在逻辑冲突的语句对；
			3.2 保持原文措辞；
			3.3 使用严格的python可读的嵌套列表格式：[["原文语句1", "存在矛盾的语句1"], ["原文语句2", "存在矛盾的语句2"]]

			以下是给定的【【type】】文档，请仔细识别其中包含【【错误类型】】的句子。
			-------------
			【标题】：
			【正文】：
			------------
			"""
		self.prompt_doc_logic1 = """
			你是一名金融文档的质检专家，负责识别金融文档中的【【错误类型】】。请按照以下流程处理文档：
			【任务说明】
			1. 【定义】：【错误类型定义】
			   【示例】：
			【examples】
			2. 文档处理流程
			2.1. 通读整篇研报，标注所有可疑的语句对；
			2.2. 交叉验证【【错误类型】】。
			3. 输出要求
			3.1 仅返回确认后的存在逻辑冲突的语句对；
			3.2 保持原文措辞；
			3.3 使用严格的python可读的嵌套列表格式：[["存在矛盾的语句1"], ["原文语句2", "存在矛盾的语句2"]]

			以下是给定的【【type】】文档，请仔细识别正文是否包含【【错误类型】】的句子，并以嵌套列表形式返回，若没有发现该类错误，请返回空列表[]。
			-------------
			【标题】：
			【正文】：
			------------
			"""
		self.prompt_doc_single2 = """你是一名文档质量检查者，请依据【【错误类型】】的错误类型定义判断下述文本中是否存在该类错误，若存在该类错误，请以嵌套列表形式返回存在该类错误的句子（对），否则返回空列表[]。请注意不要输出你的推理过程，只需给出目标错误句子（对），且不要输出其他类型的错误语句。
			【错误类型定义】：
			-------------
			输入：
			【句子】：
			输出：
		"""
		self.prompt_doc_single2 = """你是一名文档质量检查者，现在你将文档中可能存在的错误划分成十大类，以下是这十大类错误的定义：
			（1）数值缺失错误是指在文本中出现了应当明确提供的数值信息（如数量、金额、比例、时间、网址等），但该数值被遗漏，导致语义不完整或信息表达不清的情况。
			（2）语句缺失错误是指文段中存在结构性或内容性遗漏，尤其是在列举、排比、并列句等句式中，缺失了应有的语句、成分或内容项，导致语义不完整或表述突兀。
			（3）格式错误是指文档中出现的数据项在表现形式上不符合预先设定或常用的格式规则。常见问题包括：网址格式不对，邮编不是6位数，邮箱少@，联系电话位数不对。
			（4）时间信息非法是指文档中出现了不符合现实或常规表达的时间描述。常见问题包括：日期中的“日”超过该月的最大天数，月份超过12月，小时数不在0-23的范围内，年份不符合上下文语境。
			（5）数值单位错误是指文档中数值所对应的单位使用不。常见问题包括：单位选择不合常理（如面积使用平方分米，观影人数使用“人次”但具体数量为小数）；单位与数值语义不匹配（如礼堂改造项目的预算金额为200.00元）。
			（6）主体不一致是指文档中提及的主体（如人、组织、事件等）在不同部分的描述存在冲突或混淆。常见问题包括：不同主题被误认为同一主体；属性描述相互矛盾。
			（7）冗余语句是指文档中出现内容重复或表达重复的语句片段，这类冗余通常不会增加新的信息。常见问题包括：相同数据；措辞的重复。",
				"时间矛盾错误":"时间矛盾错误是指文档中出现了违反时间逻辑的描述。常见问题包括：逻辑时间顺序错误（如“开标早于投标截至时间”）;时间表达不合理（如“上午23点”）。
			（8）计算错误是指文档中涉及数值计算、比例分配、增长率变动等方面的结果与其应有的计算逻辑不一致。常见问题包括：数值计算错误，比例之和大于100%，增减幅度计算错误等。
			（9）语义逻辑矛盾是指文档内容在逻辑上存在明显冲突或自相矛盾的情况。常见问题包括：条件与结论不符；排名与所属范围不一致；表述本身存在矛盾或语义冲突。
			（10）数值不一致错误是指在同一文档中，本应保持一致的数值信息在不同位置出现不一致的情况，通常发生在标书编号、金额、数量、时间等关键字段。
			====

			下面请你跟据【【错误类型】】的错误类型定义判断下述句子中是否存在该类错误，若存在该类错误，请以嵌套列表形式返回存在该类错误的句子（对），否则返回空列表[]。请注意不要输出你的推理过程，只需给出目标错误句子（对），且不要输出其他类型的错误语句。
			输入：
			【句子】：
			输出：
			"""

		self.prompt_doc_single2 = """你是一名文档质量检查者，请你判断下述文本中是否存在<|error_type_start|>【错误类型】<|error_type_end|>。请在第一行输出分析过程，并在第二行以json格式返回找到的错误句子（对）。
		【句子】：
		"""
		self.doc_lens = []

	def read_docx(self, doc_file):
		doc = Document(doc_file)
		paragraphs = []

		# file_name = os.path.basename(doc_file)
		name = os.path.splitext(doc_file)[0]
		name = name.split('/')[-1]

		first_para = doc.paragraphs[0].text
		overlap = len(set(first_para) & set(name))*1.0 / len(set(first_para) | set(name))
		# print(name)
		# print(first_para)
		# print(overlap)

		if overlap < 0.5:
			paragraphs.append(first_para)

		for para in doc.paragraphs[1:]:
			text = para.text.strip().replace(' ', ' ').replace('　', '').replace(' ', ' ').replace('    ', '    ').replace(' ', ' ')
			if text:
				paragraphs.append(text)

		self.doc_lens.append(len('\n'.join(paragraphs)))
		return {
			"type": self.doc_types[name],
			"name": name,
			"paras": paragraphs
			}

	def check_single_doc(self, doc, error_idx):
		#一次输入一篇doc，检查是否出现所有类型的错误
		if self.check_type == 'all_doc':
			paras = '\n'.join(doc['paras'])

		if self.check_error == 'single':
			error = self.error_types[error_idx]
			insts = self.examples[error]
			#print('当前处理的错误类型是', error)
			if '矛盾' in error:
				prompt = self.prompt_doc_logic1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【正文】：', '【正文】：'+paras).replace('【type】', doc['type'])
			else:
				prompt = self.prompt_doc_single1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【正文】：', '【正文】：'+paras).replace('【type】', doc['type'])

			if 'lora' in self.llm:
				prompt = self.prompt_doc_single2.replace('	', '').replace('【句子】：', paras)

			prompt = prompt.replace('【错误类型】', error).replace('【错误类型定义】', self.definitions[error]).replace('【examples】', json.dumps(insts, ensure_ascii=False))

			return prompt	
		# 	check_res = self.check_single_error(paras, error, prompt)

		# return check_res	
			# for error, insts in examples.items():

	def check_single_error(self, text, error, prompt):
		#给定片段，每次只检查是否出现了特定类型的错误
		try:
			insts = self.examples[error]
			prompt = prompt.replace('【错误类型】', error).replace('【错误类型定义】', self.definitions[error]).replace('【examples】', json.dumps(insts, ensure_ascii=False))
			# prompt = prompt.replace('【错误类型】', error)
			#print(prompt)
			if self.vllm:
				res = self.llm_api.get_response([prompt])
			else:
				# print('大模型的输入:', prompt[:100])
				res = self.llm_api.gen_multi_answers([prompt])
				# print('大模型的输出:', res[1])

			# print(json.dumps(res, ensure_ascii=False))
			# print('------------------')
			return res
		except Exception as e:
			traceback.print_exc()
			print(len(prompt))
			return [['', 'error']]
	
	def check_single_doc_by_chunk(self, doc, error_idx):
		#对文档进行切割，每个片段固定1000字以内
		max_len = 2000
		chunks = []
		temp = ''
		for i, p in enumerate(doc['paras']):
			if len(p) > max_len:
				temp += p
				chunks.append(p)
				temp = p + '\n'
			elif len(temp) + len(p) > max_len:
				chunks.append(temp)
				temp = doc['paras'][i-1]+'\n'+p+'\n'
			else:
				temp += p +'\n'

		chunks.append(temp)

		error = self.error_types[error_idx]
		if '矛盾错误' in error or '不一致' in error:
			prompt = self.prompt_doc_logic1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【type】', doc['type'])
		else:
			prompt = self.prompt_doc_single1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【type】', doc['type'])
		
		prompts = []
		insts = self.examples[error]
		for context in chunks:
			prompt1 = prompt.replace('【正文】：', '【正文】：'+context).replace('【错误类型】', error).replace('【错误类型定义】', self.definitions[error].split('例如')[0]).replace('【examples】', json.dumps(insts, ensure_ascii=False))
			prompts.append(prompt1)

		return self.llm_api.get_response(prompts)

class Classifier(object):
		"""docstring for Classifier"""
		def __init__(self, checker_llm):
			self.prompt = """你是一名金融文档质量检查专家，负责识别金融文档中的各类错误，如常识错误、数值前后不一致、数值单位错误、数据缺失、逻辑不一致、重复描述、计算错误等等。请你仔细阅读给定的候选，以及它所在的文档的标题和正文。请你找出候选所在的位置，结合上下文或你自身的知识判断【这句话】中是否存在错误，若存在，请返回“是”， 否则请返回“否”。
			--------------\n
			【候选】：
			*****************\n
			【标题】：
			【上下文】：
			"""

			self.prompt1 = """你是一名金融文档质量检查专家，负责识别金融文档中的【【错误类型】】。\n【【错误类型定义】】\n			
				现给你一篇金融文档的标题和正文，以及其中可能存在问题的【一句话】，请你找出【这句话】所在的上下文，结合上下文判断【这句话】中是否存在【【错误类型】】。若确实存在该错误，请返回“是”，否则请返回“否”\n\
				--------------\n
				【候选】：
				*****************\n
				【标题】：
				【正文】：
				"""

			self.prompt2 = """你是一名金融文档质量检查专家，负责识别金融文档中的【【错误类型】】。\n【【错误类型定义】】\n			
				现给你一篇金融文档中可能存在问题的【一句话】，以及这篇文档的标题和【这句话】所在的上下文，请你结合上下文判断【这句话】中是否存在【【错误类型】】。若确实存在该错误，请返回“是”，否则请返回“否”\n\
				--------------\n
				【候选】：
				*****************\n
				【标题】：
				【上下文】：
				"""
			self.prompt3 = """你是一名文档质量检查专家，负责文档中的错误检测，包括\n
			1) 搭配不适，如小说在上演，对自身的过错作出了自己应当承担的责任；\n
			2) 缺失，如一开始我们就有机会扳平比分，但我们没有机会。\n
			3) 冗余，如一些外资银行，尤其是外资银行。\n
			4) 指代错误，在婚姻变得更为不好时，这对她来说是痛苦的，但当她发生变化时，她必须做出调整。\n
			5) 常识，如中美两国是近邻；各大汽车经销商在国庆期间将以什么样的姿态迎接新的一年？\n
			请你判断以下给定的一句话，是否存在上述提到的错误。若存在，请返回“是”， 否则请返回“否”。\n
			-----------------\n
			【候选】：
			"""
			self.llm_api = checker_llm.llm_api

		def judge(self, doc, candidates):
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#candidates是候选， []
			paras = '\n'.join(doc['paras'])
			prompt = self.prompt.replace('	', '').replace('【标题】', doc['name']).replace('【正文】', paras)
			prompts = []
			for x in candidates:
				prompt1 = prompt.replace('	', '').replace('【候选】', json.dumps(x, ensure_ascii=False))
				# print(prompt1)
				# exit()
				prompts.append(prompt1)
			
			res = self.llm_api.get_response(prompts)

			final_res = []
			for i, q in enumerate(candidates):
				a = res[i][1]
				final_res.append([q, a])
			
			return final_res	

		def judge_by_error_type(self, doc, candidates, error_type, defintion):
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#candidates是候选， []
			#error_type,错误类型，str
			paras = '\n'.join(doc['paras'])
			prompt = self.prompt1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【正文】：', '【正文】：'+paras).replace('【错误类型】', error_type).replace('【错误类型定义】', defintion)
			prompts = []
			for x in candidates:
				if len(x) == 1:
					prompt1 = prompt.replace('【候选】：', '【候选】：'+ x[0])
				else:
					prompt1 = prompt.replace('【候选】：', '【候选】：'+json.dumps(x, ensure_ascii=False))
					prompt1 = prompt1.replace('【一句话】', '【一对句子】').replace('【这句话】', '【这对句子】')
				
				# print(prompt1)
				# exit()
				prompts.append(prompt1)
			
			res = self.llm_api.get_response(prompts)

			final_res = []
			for i, q in enumerate(candidates):
				a = res[i][1]
				final_res.append([q, a])
			
			return final_res

		def judge_all(self, doc, cands, checker):
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#candidates是候选，{'error_type': []}
			#checker
			paras = '\n'.join(doc['paras'])
			prompt = self.prompt1.replace('	', '').replace('【标题】：', '【标题】：'+doc['name']).replace('【正文】：', '【正文】：'+paras)
			prompts = []
			final_res = []

			for error, sents in cands.items():
				prompt1 = prompt.replace('【错误类型】', error).replace('【错误类型定义】', checker.definitions[error])
				for x in sents:
					if len(x) == 1:
						prompt2 = prompt1.replace('【候选】：', '【候选】：'+ x[0])
					else:
						prompt2 = prompt1.replace('【候选】：', '【候选】：'+json.dumps(x, ensure_ascii=False))
						prompt2 = prompt2.replace('【一句话】', '【一对句子】').replace('【这句话】', '【这对句子】')
					prompts.append(prompt2)
					final_res.append([error, x])

			# print(prompts)
			# exit()		
			res = self.llm_api.get_response(prompts)

			for i in range(len(final_res)):
				a = res[i][1]
				final_res[i].append(a)
			
			return final_res

		def find_context_by_position(self, doc, cand):
			#返回候选所在位置的上下文
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#cand, str
			idx = [] #找到包含cand的段落号
			context = ''
			if len(cand) == 1:
				for i, para in enumerate(doc['paras']):
					if cand[0] in para:
						idx.append(i)

				if len(idx) == 1:
					if len(doc['paras']) < 5:   #如果文本的段落本来就很少，就直接返回当前段落好了
						context = doc['paras'][idx[0]]
					else:
						if idx[0] > 0:
							context = doc['paras'][idx[0]-1] + '\n' 
						context += doc['paras'][idx[0]]
						if idx[0] < len(doc['paras'])-1:
							context += '\n' + doc['paras'][idx[0]+1]

			elif len(cand) == 2:
				for i, para in enumerate(doc['paras']):
					if cand[0] in para:
						idx.append(i)
					elif cand[1] in para:
						idx.append(i)
				if idx[0] == idx[-1]:
					context = doc['paras'][idx[0]]
				else:
					for i in range(idx[0], idx[-1]):
						context += doc['paras'][i] +'\n'
					context += doc['paras'][idx[-1]]	

			return context

		def find_context_by_sim(self, doc, cand):
			#返回与候选相似度最高的句子所在的段落，若相似度低于阈值，则返回候选所在的段落
			#相似度通过overlap计算
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#cand, str
			idx = [] #找到包含cand的段落号
			context = ''

			if len(cand) == 1:
				for i, para in enumerate(doc['paras']):
					if cand[0] in para:
						idx.append(i)

				if len(idx) == 1:
					if len(doc['paras']) < 5:   #如果文本的段落本来就很少，就直接返回当前段落好了
						context = doc['paras'][idx[0]]
					else:
						if idx[0] > 0:
							context = doc['paras'][idx[0]-1] + '\n' 
						context += doc['paras'][idx[0]]
						if idx[0] < len(doc['paras'])-1:
							context += '\n' + doc['paras'][idx[0]+1]

			elif len(cand) == 2:
				for i, para in enumerate(doc['paras']):
					if cand[0] in para:
						idx.append(i)
					elif cand[1] in para:
						idx.append(i)
				if idx[0] == idx[-1]:
					context = doc['paras'][idx[0]]
				else:
					for i in range(idx[0], idx[-1]):
						context += doc['paras'][i] +'\n'
					context += doc['paras'][idx[-1]]	

			return context

		def judge_by_context(self, doc, cands, checker):
			#doc是原文信息， {"type": str, "name": str, "paras": []}
			#candidates是候选，{'error_type': []}
			#checker
			# prompt = self.prompt2.replace('	', '').replace('【标题】：', '【标题】：'+doc['name'])
			prompt = self.prompt.replace('	', '').replace('【标题】：', '【标题】：'+doc['name'])
			prompts = []
			final_res = []

			for error, sents in cands.items():
				prompt1 = prompt.replace('【错误类型】', error).replace('【错误类型定义】', checker.definitions[error])
				for x in sents:
					if len(x) == 1:
						prompt2 = prompt1.replace('【候选】：', '【候选】：'+ x[0])
					else:
						prompt2 = prompt1.replace('【候选】：', '【候选】：'+json.dumps(x, ensure_ascii=False))
						prompt2 = prompt2.replace('【一句话】', '【一对句子】').replace('【这句话】', '【这对句子】')
					context = self.find_context_by_position(doc, x)
					prompt2 = prompt2.replace('【上下文】：', '【上下文】：'+context)
					prompts.append(prompt2)
					final_res.append([error, x])

			print(prompts)
			# exit()		
			res = self.llm_api.get_response(prompts)

			for i in range(len(final_res)):
				a = res[i][1]
				final_res[i].append(a)
			
			return final_res


def main(error_idx):
	#调用大模型检测漏洞
	doc_path = './A_docs'
	# files = os.listdir(doc_path)
	# random.shuffle(files)

	checker =  Checker()
	if not os.path.exists('./output1'):
		os.mkdir('./output1')

	target_fnames = ["期货交易管理条例", "吉林中油宝石花石油安装有限责任公司劳务外包项目", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势", "教育部教育考试院数据中心计算资源采购项目招标公告", "政府采购货物和服务招标投标管理办法", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%", "2024~2026年独山子石化中密控股密封维修框架公开招标", "证券公司监督管理条例", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》", "中央国家机关2024年工程监理服务框架协议采购项目征集公告", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告", "北京大学第一医院全院印刷品采购项目招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目", "中华人民共和国招标投标法", "中华人民共和国保险法", "平安家庭财产保险（家庭版）条款", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外", "西安市消防救援支队培训楼会议视频系统采购项目招标公告", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长", "中华人民共和国预算法实施条例", "中华人民共和国企业国有资产法", "风城油田夏子街转油站完善工程", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告", "中华人民共和国会计法", "政府购买服务管理办法", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目", "平安产险学生意外伤害保险（互联网版）条款", "政府采购非招标采购方式管理办法", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告", "我国特高压建设提速，柔性直流输电市场潜力巨大", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告"]

	for error_idx in range(len(checker.error_types)):
		results = []
		res_file = './output/'+ checker.llm+'_'+checker.error_types[error_idx]+'_res.jsonl'
		print('当前处理的错误类型是：', checker.error_types[error_idx])
		prompts = []
		try:
			# for file in files[:50]:
			for f in target_fnames:
				file = f+'.docx'
				file_name = os.path.join(doc_path, file)
				doc = checker.read_docx(file_name)
				temp_p = checker.check_single_doc(doc, error_idx)
				results.append({'name': doc['name'], 'res': '', 'prompt': temp_p})

				prompts.append(temp_p)

				# res = checker.check_single_doc(doc, error_idx)[0]
				# results.append({'name': doc['name'], 'res': res[1], 'prompt': res[0]})

				# res = checker.check_single_doc_by_chunk(doc, error_idx)
				# for x in res:
				# 	results.append({'name': doc['name'], 'res': x[1], 'prompt': x[0]})
				# break
			step = 32
				
			for i in range(0, len(prompts), step):
				if checker.vllm:
					res = checker.llm_api.get_response(prompts[i:i+step])
				else:
					res = checker.llm_api.gen_multi_answers(prompts[i:i+step])
				for j, temp_res in enumerate(res):
					results[i+j]['res'] = temp_res[1]
			
		except:
			traceback.print_exc()

		with open(res_file, 'w', encoding='utf-8') as fw:
			json.dump(results, fw, ensure_ascii=False, indent=4)
		# break

	# for p in [10, 50, 70, 80, 90, 95, 100]:
	#	print(p, np.percentile(checker.doc_lens, p))
		# doc_a中的文档长度
		# 10 1119.0
		# 50 2304.0
		# 70 3324.7
		# 80 4097.8
		# 90 7017.6
		# 95 12539.1
		# 100 21799.0


def main_classify():
	#给定漏洞判断是否真实
	doc_path = './A_docs'
	checker =  Checker()
	classfifier = Classifier(checker)

	if not os.path.exists('./output'):
		os.mkdir('./output')
	
	gd_path = './groundtruth'
	gd_sents = {}
	for f in os.listdir(gd_path):
		if 'merge' not in f:
			continue
		f = os.path.join(gd_path, f)
		with open(f, 'r', encoding='utf-8') as fr:
			line = fr.readline()
			line = line.replace('　', ' ')
			while line:
				x = json.loads(line)
				gd_sents[x['id']] = x['sents']
				line = fr.readline()
				line = line.replace('　', ' ')

	target_fnames = ["期货交易管理条例", "吉林中油宝石花石油安装有限责任公司劳务外包项目", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势", "教育部教育考试院数据中心计算资源采购项目招标公告", "政府采购货物和服务招标投标管理办法", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%", "2024~2026年独山子石化中密控股密封维修框架公开招标", "证券公司监督管理条例", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》", "中央国家机关2024年工程监理服务框架协议采购项目征集公告", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告", "北京大学第一医院全院印刷品采购项目招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目", "中华人民共和国招标投标法", "中华人民共和国保险法", "平安家庭财产保险（家庭版）条款", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外", "西安市消防救援支队培训楼会议视频系统采购项目招标公告", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长", "中华人民共和国预算法实施条例", "中华人民共和国企业国有资产法", "风城油田夏子街转油站完善工程", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告", "中华人民共和国会计法", "政府购买服务管理办法", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目", "平安产险学生意外伤害保险（互联网版）条款", "政府采购非招标采购方式管理办法", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告", "我国特高压建设提速，柔性直流输电市场潜力巨大", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告"]
	results = []
	for f in target_fnames:
		file = f+'.docx'
		file_name = os.path.join(doc_path, file)
		doc = checker.read_docx(file_name)
		results.append({'name':doc['name'], 'res': classfifier.judge(doc, gd_sents[f])})

	res_file = './output/judge_res_'+checker.llm+'.jsonl'
	with open(res_file, 'w', encoding='utf-8') as fw:
		json.dump(results, fw, ensure_ascii=False, indent=4)

def main_classify_():
	#给定漏洞判断是否真实
	doc_path = './A_docs'
	checker =  Checker()
	classfifier = Classifier(checker)

	if not os.path.exists('./output'):
		os.mkdir('./output')
	
	gd_sents = defaultdict(dict)

	for error_idx, error in enumerate(checker.error_types):
		print('当前处理的错误类型是：', error)
		f = './groundtruth/' + error +'.json'
		with open(f, 'r', encoding='utf-8') as fr:
			line = fr.readline()
			line = line.replace('　', ' ')
			while line:
				x = json.loads(line)
				gd_sents[x['id']][error] = x['sents']
				line = fr.readline()

	target_fnames = ["期货交易管理条例", "吉林中油宝石花石油安装有限责任公司劳务外包项目", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势", "教育部教育考试院数据中心计算资源采购项目招标公告", "政府采购货物和服务招标投标管理办法", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%", "2024~2026年独山子石化中密控股密封维修框架公开招标", "证券公司监督管理条例", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》", "中央国家机关2024年工程监理服务框架协议采购项目征集公告", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告", "北京大学第一医院全院印刷品采购项目招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目", "中华人民共和国招标投标法", "中华人民共和国保险法", "平安家庭财产保险（家庭版）条款", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外", "西安市消防救援支队培训楼会议视频系统采购项目招标公告", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长", "中华人民共和国预算法实施条例", "中华人民共和国企业国有资产法", "风城油田夏子街转油站完善工程", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告", "中华人民共和国会计法", "政府购买服务管理办法", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目", "平安产险学生意外伤害保险（互联网版）条款", "政府采购非招标采购方式管理办法", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告", "我国特高压建设提速，柔性直流输电市场潜力巨大", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告"]
	results = []
	for f in target_fnames:
		file = f + '.docx'
		file_name = os.path.join(doc_path, file)
		doc = checker.read_docx(file_name)
		if f in gd_sents:
			# res = classfifier.judge_all(doc, gd_sents[f], checker)
			res = classfifier.judge_by_context(doc, gd_sents[f], checker)
			results.append({'name': doc['name'], 'res': res})

		# for error in checker.error_types:
		# 	if error in gd_sents[f]:
		# 		res = classfifier.judge_by_error_type(doc, gd_sents[f][error], error, checker.definitions[error]) 
		# 		results.append({'name':doc['name'], 'res': res, 'error': error,'prompt': res[0]})

	res_file = './output/judge_res_'+checker.llm+'_context.jsonl'
	with open(res_file, 'w', encoding='utf-8') as fw:
		json.dump(results, fw, ensure_ascii=False, indent=4)

def main_classify_tgea():

	file = './groundtruth/tgea_test.json'
	checker =  Checker()
	rator = Classifier(checker)

	data = []
	prompts = []
	with open(file, 'r', encoding='utf-8') as fr:
		line = fr.readline()
		while line:
			line = json.loads(line)
			text = line['原文']
			tag = line['正错判断']
			if tag == '错误':
				error = line['具体错误'][0]['错误大类']
				data.append([text, -1, error])
			else:
				data.append([text, 1, ''])
			prompts.append(rator.prompt3.replace('【候选】：', '【候选】：'+ text))
			
			line = fr.readline()
			

	for i in range(0, len(prompts), 32):
		res = rator.llm_api.get_response(prompts[i:min(i+32, len(prompts))])
		try:
			for j in range(len(res)):
				a = res[j][1]
				data[i+j].append(a)
		except:
			traceback.print_exc()	
			print(i, j, len(prompts))	
	file = './output/tgea_judge_res_'+checker.llm+'.json'
	with open(file, 'w', encoding='utf-8') as fw:
		json.dump(data, fw, ensure_ascii=False, indent=4)


def check():
	#判断标准答案是不是存在与文档中
	checker = Checker()
	doc_path = './A_docs'
	# doc_path = './B_docs'
	# doc_path = './C_docs'
	
	gd_sents = defaultdict(dict)

	for error_idx, error in enumerate(checker.error_types):
		print('当前处理的错误类型是：', error)
		f = './groundtruth/' + error +'.json'
		with open(f, 'r', encoding='utf-8') as fr:
			line = fr.readline()
			line = line.replace(' ', ' ').replace('　', '').replace(' ', ' ').replace('    ', '    ').replace(' ', ' ')
			while line:
				x = json.loads(line)
				gd_sents[x['id']][error] = x['sents']
				line = fr.readline()
	
	# f = '北京市消防救援总队应急能力建设车辆装备购置项目五标段招标公告'
	# t = '数值单位错误'

	# print(gd_sents[f][t])
	# target_fnames = ["期货交易管理条例", "吉林中油宝石花石油安装有限责任公司劳务外包项目", "交通运输仓储行业研究：马士基继续暂停船只通过红海，2024年航空客流力争6.9亿人次", "房地产：关于深圳城中村改造新政意见稿的点评-深圳城中村改造提速推进，新政意见稿最大变化在于向一二级分离倾斜", "长庆油田页岩油开发分公司2024年活动洗井车（带压密闭）洗井技术服务（二次）", "中国石油集团测井有限公司制造公司2024-2025年热处理等工序委外", "有色金属行业月度点评：金属价格全面上行，有色板块表现强势", "教育部教育考试院数据中心计算资源采购项目招标公告", "政府采购货物和服务招标投标管理办法", "公用事业—电力天然气周报：电力市场监管步入正轨，4月天然气进口量同比增长13.7%", "2024~2026年独山子石化中密控股密封维修框架公开招标", "证券公司监督管理条例", "煤炭行业周报（1月第2周）：动力煤价格反弹，1月煤价将维持高位", "中油测井井下仪器在多温度、压力场中机械结构及性能仿真技术（二次）", "中国地震局地质研究所园区综合物业管理服务采购项目招标公告", "通信行业周观点：工信部等十一部门联合印发《关于开展“信号升格”专项行动的通知》", "中央国家机关2024年工程监理服务框架协议采购项目征集公告", "长庆油田分公司第十二采油厂2024年轻烃生产辅助业务（二标段三次）", "榆林市消防救援支队消防语音图像自组网建设和消防图像综合管理系统升级改造采购项目招标公告", "北京大学第一医院全院印刷品采购项目招标公告", "北京市消防救援总队应急能力建设车辆装备购置项目三标段招标公告", "2024年西部钻探试油测试技术研发中心建设勘察初步设计服务项目", "中华人民共和国招标投标法", "中华人民共和国保险法", "平安家庭财产保险（家庭版）条款", "科电大厦修缮二期(空调、消防及照明系统)项目施工招标资格预审公告", "国家机关事务管理局审计室2024-2025年度审计服务框架协议采购项目征集公告", "抚顺石化公司烯烃厂2024年低砷磷酸框架采购（二次）", "中国石油集团测井有限公司制造公司2024-2025年焊接等工序委外", "西安市消防救援支队培训楼会议视频系统采购项目招标公告", "传媒行业周报：国产大模型多模态方向发展，积极探索商业化", "中亚天然气管道（霍尔果斯）有限公司 2024年流量计使用中测试项目（二次）", "家电行业周报：线上扫地机表现亮眼，洗地机维持增长", "中华人民共和国预算法实施条例", "中华人民共和国企业国有资产法", "风城油田夏子街转油站完善工程", "国家移民管理局瑞丽遣返中心礼堂信息化建设设备采购项目招标公告", "中华人民共和国会计法", "政府购买服务管理办法", "兰州石化公司化工区非抗爆控制室隐患治理项目智能巡检仪采购（二次）", "电子行业周观点：AI存储需求高景气，晶圆大厂切入先进封装赛道", "北京师范大学后主楼和教三楼物业管理服务采购项目招标公告", "中国石油运输有限公司甘肃化工分公司固体化工产品（庆阳石化橡塑产品补充运力）运输服务项目", "长庆油田分公司第三采油厂2024年油井智能分采工艺技术改进研究与应用服务项目", "平安产险学生意外伤害保险（互联网版）条款", "政府采购非招标采购方式管理办法", "中南大学湘雅医院2023年IT基础设施设备采购项目招标公告", "我国特高压建设提速，柔性直流输电市场潜力巨大", "秦皇岛-丰南沿海输气管道工程PC总承包五标段（收发球筒及分离器）采购", "中国医学科学院阜外医院本部院区一号楼三层日间手术室改造工程竞争性磋商公告"]
	# results = []
	# for f in target_fnames:
	for file in os.listdir(doc_path):
		# file = f+'.docx'
		f = file.replace('.docx', '')
		file_name = os.path.join(doc_path, file)
		doc = checker.read_docx(file_name)
		paras = '\n'.join(doc['paras'])
		print('当前处理的文件是:', f)
		flag = False
		for t, sents in gd_sents.get(f, {}).items():
			for x in sents:
				if len(x) == 1:
					if x[0] not in paras:
						print('error', t, x)
						flag = True
				else:
					if x[0] not in paras:
						print('error', t, x[0])
						flag = True
					if x[1] not in paras:
						print('error', t, x[1])
						flag = True
		if flag:
			print('正文:')
			print(paras)				
def check_():
	#合并标准答案，并和原来的合并结果做对比
	gd_sents = defaultdict(dict)
	checker = Checker()

	for error_idx, error in enumerate(checker.error_types):
		print('当前处理的错误类型是：', checker.error_types[error_idx])
		f = './groundtruth/' + error +'.json'
		with open(f, 'r', encoding='utf-8') as fr:
			line = fr.readline()
			line = line.replace('　', ' ')
			while line:
				line = json.loads(line)
				exists = gd_sents[line['id']]
				gd_sents[line['id']][error] = []
				if exists:
					for x in line['sents']:
						flag = False
						for t, old_s in exists.items():
							for i , y in enumerate(old_s):
								if len(x) == 1:
									if len(y) == 1:
										if (x[0] in y[0]):
											print(f, t, x)
											flag = True
										elif  (y[0] in x[0]):
											gd_sents[line['id']][t][i] = x
											print(f, t, x)
											flag = True
									else:
										if (x[0] in y[0]):
											print(f, t, x)
											flag = True
										elif  (y[0] in x[0]):
											gd_sents[line['id']][t][i][0] = x[0]
											flag = True
										elif (x[0] in y[1]):
											print(f, t, x)	
											flag = True
										elif (y[1] in x[0]):
											gd_sents[line['id']][t][i][1] = x[0]
											flag = True
								else:
									if len(y) == 1:
										if (x[0] in y[0]):
											print(f, t, x)	
											flag = True
										if  (y[0] in x[0]):
											print(f, t, x, 'unkown')

										elif (x[1] in y[0]):
											print(f, t, x)	
											flag = True
										elif (y[0] in x[1]):
											print(f, t, x, 'unkown')
									else:
										if (x[0] in y[0]) or (y[0] in x[0]):
											print(f, t, x, 'unkown')
										elif (x[0] in y[1]) or (y[1] in x[0]):
											print(f, t, x, 'unkown')
										elif (x[1] in y[0]) or (y[1] in x[0]):
											print(f, t, x, 'unkown')
										elif (x[1] in y[1]) or (y[1] in x[1]):
											print(f, t, x, 'unkown')	
						if not flag:
				 			gd_sents[line['id']][error].append(x)
				else:
				 	gd_sents[line['id']][error] = line['sents']
				line = fr.readline()

	final_res = []
	for _id, info in gd_sents.items():
		temp = {'id':_id, 'sents':[]}
		for t, sents in info.items():
			temp['sents'].extend(sents)
		final_res.append(temp)

	file = './groundtruth/all_merge.json'
	# if os.path.exists(file):
	# 	print(file,'已存在')
	# 	exit()
	with open(file, 'w', encoding='utf-8') as fw:
		for x in final_res:
			fw.write(json.dumps(x, ensure_ascii=False)+'\n')


def check_1():
	checker = Checker()
	count = {}
	for error_idx, error in enumerate(checker.error_types):
		print('当前处理的错误类型是：', checker.error_types[error_idx])
		count[error] = 0
		f = './groundtruth/' + error +'.json'
		with open(f, 'r', encoding='utf-8') as fr:
			line = fr.readline()
			line = line.replace('　', ' ')
			while line:
				line = json.loads(line)
				count[error] += len(line['sents'])
				line = fr.readline()
				line = line.replace('　', ' ')
	print(json.dumps(count, ensure_ascii=False))

if __name__ == '__main__':
	# check()
	# exit()
	# check_1()
	# exit()
	# main_classify_tgea()
	# exit()

	# main_classify_()
	# exit()

	mdopt = optparse.OptionParser()
	mdopt.add_option('-i', '--index',dest='index', type='int', default=0)
	options, args = mdopt.parse_args()
	idx = options.index

	main(idx)
	